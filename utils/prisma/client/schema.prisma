generator client {
  provider = "prisma-client-js"
  output   = "../next-gs/utils/prisma/client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Role {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String
}

model UserRole {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  roleId String
  userId String @db.ObjectId
  User   User   @relation(fields: [userId], references: [id])
}

model User {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String     @unique
  email     String     @unique
  image     String?
  pswd      String
  lastLogin DateTime?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  chats     Chat[]
  messages  Message[]
  roles     UserRole[]
  Company   Company[]
}

model Employee {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  userId    String  @db.ObjectId
  companyId String  @db.ObjectId
  Company   Company @relation(fields: [companyId], references: [id])

  @@unique([userId, companyId])
}

model Company {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  cnpj      String
  address   String
  owner     User       @relation(fields: [ownerId], references: [id])
  ownerId   String     @db.ObjectId
  employees Employee[]
}

model Contact {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  phone     String
  email     String?
  avatar    String?
  chatId    String?
  lastMsgId String?  @db.ObjectId
  lastMsg   Message? @relation(fields: [lastMsgId], references: [id])
}

model Chat {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  user     User      @relation(fields: [userId], references: [id])
  userId   String    @db.ObjectId
  openedAt DateTime  @default(now())
  closedAt DateTime?
  status   String
  messages Message[]
}

model Message {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  chat    Chat     @relation(fields: [chatId], references: [id])
  chatId  String   @db.ObjectId
  user    User     @relation(fields: [userId], references: [id])
  userId  String   @db.ObjectId
  content String
  sentAt  DateTime @default(now())

  Contact Contact[]
}
